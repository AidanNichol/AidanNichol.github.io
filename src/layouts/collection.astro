---
import { getCollection } from 'astro:content';
import ShowImage from '@components/ShowImage.astro';
import Layout from '@layouts/default.astro';
import Link from '@components/LinkTT.astro';
import LinkTT from '@components/LinkTT.astro';
import Details from '@components/Details.astro';
import SubpagesMenu from '@components/SubpagesMenu.astro';
// import * as _ from 'lodash-es';
import Box from '@components/Box.astro';
const thisFile = import.meta.url;

import { parseImageName } from '@utils/parseImageName.mjs';
import type { CollectionEntry } from 'astro:content';
type Coll = CollectionEntry<'aidan'>;
interface Props {
  collection: 'aidan' | 'margaret' | 'heritage' | 'docs';
  id: string;
  page: Coll['data'];
}
const url = (cllctn: Coll) => `/${cllctn.collection}/${cllctn.id}`;
// console.log('props', Astro.props, collectionEntries)

let shortName = (work: CollectionEntry<'aidan'>) =>
  work.data.shortname ?? work.data.title;

let prev: Coll | undefined;
let next: Coll | undefined;
const { collection, id, page } = Astro.props;
console.log('props', id, page, Astro.props);

const collectionEntries: Coll[] = await getCollection(
  collection,
  (entry: Coll) => !entry.id.includes('/'),
);
const hasSubpages = !!page.subPages || id.includes('/');
let subPages: Coll[] | undefined;
let parent;
let parentPage;
if (hasSubpages) {
  const idParts = id.split('/');
  const subset = `${page.subPages || idParts[0]}/`;
  console.log({ hasSubpages, subset, idParts });
  subPages = await getCollection(collection, (entry: Coll) => entry.id.includes(subset));
  if (id.includes('/')) {
    parentPage = collectionEntries.find((e) => e.data.subPages === idParts[0]) as Coll;

    parent = url(parentPage);
    console.log('parentPage', { parent }, parentPage);
  }
}

for (let i = 0; i < collectionEntries.length; i++) {
  const entry = collectionEntries[i];
  if (entry.id === id) {
    if (i > 0) prev = collectionEntries[i - 1];
    if (i < collectionEntries.length - 1) next = collectionEntries[i + 1];
  }
}

let [sub, img, extL] = parseImageName(page.image, page.person);
---

<Layout>
  <Box {thisFile} color='blue'>
    <div class='prevNext'>
      {prev ? <LinkTT href={url(prev)} title={shortName(prev)} tooltip left /> : <div />}

      <h1>
        {page.title}
        {page.subtitle && <div>{page.subtitle} </div>}
      </h1>
      {next ? <LinkTT href={url(next)} title={shortName(next)} tooltip right /> : <div />}
    </div>
    <div class='clearfix'>
      <Details collection={collection} entry={page} />
      <slot />
    </div>
    {page.image && <ShowImage image={page.image} person={page.person} />}
    {
      subPages && (
        <SubpagesMenu
          collection={collection}
          entries={subPages}
          parent={parent}
          parentPage={parentPage}
        />
      )
    }
    <div class='prevNext'>
      {prev ? <Link href={url(prev)} title={shortName(prev)} left /> : <div />}

      {next ? <Link href={url(next)} title={shortName(next)} right /> : <div />}
    </div>
  </Box>
</Layout>

<style>
  h1 {
    margin: 0;
    width: 100%;
    text-align: center;
  }
  .prevNext {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: flex-start;
    width: 100%;
    position: relative;
  }
  .prevNext > div {
    align-self: flex-start;
  }
  .clearfix:after {
    /* content: '.';
    visibility: hidden; */
    display: flow-root;
    /* height: 0;
    clear: both; */
  }
</style>
<style>
  .table {
    display: grid;
    grid-template-columns: 1fr auto;
  }
</style>
