---
import { getCollection } from 'astro:content';
import { Image, Picture } from "@astrojs/image/components";
import ShowImage from '@components/ShowImage.astro'
import Layout from "@layouts/default.astro";
import Link from "@components/LinkTT.astro";
import LinkTT from "@components/LinkTT.astro";
import _ from "lodash-es";
import { format, parse } from "date-fns";
import { parseImageName } from '@utils/parseImageName.mjs';


const { collection, slug, page } = Astro.props;

const collectionEntries = await getCollection(collection)
 collectionEntries.forEach(cllctn => {
  cllctn.url=`/${collection}/${cllctn.slug}`
 });
// console.log('props', Astro.props, collectionEntries)

let works=collectionEntries;

let prev, next, prevurl, nexturl;
for (let i = 0; i < works.length; i++) {
  const work = works[i];
  if (work.slug === slug) {
    if (i > 0) prev = works[i - 1];
    if (i < works.length - 1) next = works[i + 1];
  }
}

let dispDate = (v) =>{
    if (_.isNumber(v))return `${v}`;
    if (v.length!==10)v=`${v}-01-01`.substring(0,10);
    let val= parse(v, "yyyy-MM-dd".substring(0, v.length), new Date());
  return format(val, "MMM yyyy");
}
const mmToInch = (v) => {
  let val = Math.round(v * 0.0393701 * 4); //convert to ¼ inches
  // let ins = Math.floor(val / 4);
  // let fract = ["", "¼", "½", "¾"][val % 4];
  // console.log(v, val, ins, fract, val % 4);
  return `${Math.floor(val / 4)}${["", "¼", "½", "¾"][val % 4]}`;
};
let dispDims = (v) => {
  let [, wd, ht, units] = v.match(/([0-9.]+)\s*\S\s*([0-9.]+)\s*(in|cm|mm)/);
  const fact = units === "cm" ? 10 : units === "in" ? 25.4 : 1;
  let wdMm = _.round(wd * fact, 0);
  let htMm = _.round(ht * fact, 0);
  // console.log(wd, ht, wdMm, htMm, units);
  return `${_.round(wdMm / 10, 0)}×${_.round(htMm / 10, 0)} cm (${mmToInch(
    wdMm
  )}×${mmToInch(htMm)} in)`;
};

// console.log(page);
let shortName = (work) => work.data.shortname || work.data.title;
let details = _.omit(page,[ 'image', 'title','shortname','file','url','astro','sortname','person', 'thumbnail', 'subtitle']);
const capitalize=(val:string)=>{
  const words=_.split(val,' ').map(w=>(/^(a|the|of|in|mm|cm)$/g.test(w)?w:_.capitalize(w)))
  return words.join(' ')
}
let gotCreatedBy=false;
details=_.toPairs(details).map(([key,val])=> {
  let label =_.capitalize( _.snakeCase(key).replace(/_/g, ' '));
  if (label==='Created by')gotCreatedBy=true;
  if (label==='Dimensions')val=dispDims(val);
  if (['Completed','Started'].includes(label))val=dispDate(val);
  // console.log(key,val,label, capitalize(val))
  return [label, capitalize(val)]
});
if (!gotCreatedBy&& collection!=='heritage')details.unshift( ['Created by',capitalize(`${page.person} Nichol`)]);

details=_.uniqBy(details, (v)=>v[0])
        let [sub, img, extL] = parseImageName(page.image, page.person);


---

<Layout>
   <div class="prevNext">
    {prev ? <LinkTT href={prev.url} title={shortName(prev)} tooltip left /> : <div />}

    <h1>{page.title}
   {page.subtitle && <div>{page.subtitle} </div>}</h1>
    {next ? <LinkTT href={next.url} title={shortName(next)} tooltip right /> : <div />}
  </div>
  <div class="clearfix">
    <div class="details">
      {
        (details).map(([label,val]) => {
          if (!val) return;
          return (
              <span>{label}:</span><span>{val}</span> 
          );
        })
      }
    </div>

    <slot />
  </div>
  <ShowImage image={page.image} person={page.person}/>
   
  <div class="prevNext">
    {prev ? <Link href={prev.url} title={shortName(prev)} left /> : <div />}

    {next ? <Link href={next.url} title={shortName(next)} right /> : <div />}
  </div>
</Layout>

<style>
  h1{
    margin:0;
    width:100%;
    text-align: center;
  }
  .details {
    float: right;
    border: thin solid black;
    padding: 4px;
    font-size: 0.7em;
    border-radius: 3px;
    display: grid;
    grid-template-columns: auto 1fr;
    width: 250px;
    justify-content: space-between;
    grid-column-gap: 4px;
  }
  .prevNext {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: flex-start;
    width: 100%;
    position: relative;
  }
 .prevNext > div{
  align-self: flex-start;
 }
  .clearfix:after {
    content: ".";
    visibility: hidden;
    display: block;
    height: 0;
    clear: both;
  }
</style>
<style>
  .table {
    display: grid;
     grid-template-columns: 1fr auto;
  }
</style>